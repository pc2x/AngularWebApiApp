1. Instalar desde Nuget

EntityFramework:
versión net core 6:

- Microsoft.EntityFrameworkCore
- Microsoft.EntityFrameworkCore.Design
- Microsoft.EntityFrameworkCore.SqlServer

Asp net core Identity:

- Microsoft.AspnetCore.Identity.EntityFrameworkCore

2. Instala las herramientas de scalfolding de EntityFramework

en una terminal cmd verifica si existe la tool de entityFramework

muestra la lista de tools globales instaladas
- dotnet tool list -g

ejemplo:
Package Id      Version      Commands
--------------------------------------
dotnet-ef       6.0.23       dotnet-ef

si no existe instala la tool
- dotnet tool install dotnet-ef --version 6.0.23 -g

3. Configura una cadena de conexión en el appsettings.json

localdb: (localdb)\.
localdb: (localdb)\MSSQLLocalDB

"ConnectionStrings": {
  "DefaultConnection": "server=(localdb)\\.;database=WebApiNetCore;trusted_connection=true;MultipleActiveResultSets=true;"
}

4. Agregar el dbContext a la web api en el archivo program.cs

services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

y la clase ApplicationDbContext debe tener el constructor:

 public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
 {

 }

y heredar de  IdentityDbContext

5. Crear migrations utilizando la tool de EF

- en una terminal powershell ubicate en el directorio raiz del proyecto y ejecuta
- dotnet ef migrations add Initial

6. Si el comando se ejecutó con exito hay que ejecutar las migrations para que actualice la base de datos

ejecuta en powershell
- dotnet ef database update



